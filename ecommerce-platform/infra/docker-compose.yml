services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper     # 컨테이너 내부에서 zookeeper를 'zookeeper' 호스트명으로 접근 가능
    container_name: zookeeper
    ports:
      - "2181:2181"         # 호스트의 2181 포트를 컨테이너의 2181 포트에 매핑 (Zookeeper 클라이언트 포트)
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181    # Zookeeper 클라이언트 연결 포트 설정
      ZOOKEEPER_TICK_TIME: 2000      # Zookeeper tickTime 설정 (Zookeeper 내부 유지 보수용 heartbeat 단위)
    networks:
      - ecommerce

  broker:
    image: confluentinc/cp-kafka:latest
    hostname: broker         # Kafka 컨테이너 내부에서 'broker' 라는 호스트명으로 접근 가능
    container_name: broker
    depends_on:
      - zookeeper            # broker는 zookeeper 기동 후 시작
    ports:
      - "29092:29092"        # 내부(컨테이너간) 통신용 Kafka 포트(ADVERTISED_LISTENERS에 선언)
      - "9092:9092"          # 외부(호스트)에서 접속 시 사용할 포트
      - "9101:9101"          # JMX 모니터링용 포트
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'  # Kafka가 Zookeeper와 통신하기 위한 주소(같은 네트워크 상에서 zookeeper로 접근)
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      # PLAINTEXT와 PLAINTEXT_HOST 두 가지 리스너 이름을 사용하고, 둘 다 PLAINTEXT 프로토콜로 매핑
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
        # 컨테이너 내부(네트워크 내)에서 Kafka 브로커를 접근할 때: PLAINTEXT://broker:29092
        # 호스트 머신에서 접근할 때: PLAINTEXT_HOST://localhost:9092
        # 이로써 내부용/외부용 리스너를 분리하여 설정
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # 오프셋 토픽 복제 팩터 (단일 브로커이므로 1)
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      # JMX 호스트명 및 포트 설정(모니터링용)
    networks:
      - ecommerce

  connect:
    image: confluentinc/cp-kafka-connect:latest
    ports:
      - 8083:8083    # Kafka Connect REST API 접근 포트 (호스트에서 localhost:8083으로 접근 가능)
    container_name: connect
    environment:
      CONNECT_BOOTSTRAP_SERVERS: broker:29092
        # Kafka Connect가 Kafka 브로커에 접속할 때 사용할 bootstrap 서버 정보
      # broker:29092 → 브로커 컨테이너 내부 이름 및 포트 사용 (내부 네트워크용)
      CONNECT_REST_PORT: 8083
      # Connect REST API 포트 설정
      CONNECT_GROUP_ID: "quickstart-avro"
      # Connect 클러스터용 그룹 아이디
      CONNECT_CONFIG_STORAGE_TOPIC: "connect-config"
      CONNECT_OFFSET_STORAGE_TOPIC: "connect-offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "connect-status"
      # Connect 내부 관리용 토픽 이름들(구성정보, 오프셋, 상태 저장용)
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      # 내부 토픽들의 복제 팩터(단일 브로커 환경이므로 1로 설정)
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      # 메시지와 내부 데이터 변환기(Converter) 설정 (JSON 기반으로 사용)
      CONNECT_REST_ADVERTISED_HOST_NAME: "localhost"
      # REST API를 외부에 광고할 때 사용할 호스트명 (호스트에서 localhost:8083로 접속)
      CONNECT_LOG4J_ROOT_LOGLEVEL: WARN
      # 로그 레벨 WARN으로 설정 (불필요한 로그 감소)
      CONNECT_PLUGIN_PATH: "/usr/share/java,/etc/kafka-connect/jars"
      # 커넥트 플러그인(커넥터) 검색 경로 설정
    depends_on:
      - broker    # kafka 브로커가 먼저 올라온 후 connect 실행
    links:
      - zookeeper
      - broker
    volumes:
      - ./plugins/kafka-connect:/etc/kafka-connect/jars
      - ./plugins/kafka-connect:/etc/kafka-connect/jars
    networks:
      - ecommerce

  db:
    image: postgres:14.5
    restart: always
    environment:
      POSTGRES_DB: test
      POSTGRES_USER: root
      POSTGRES_PASSWORD: test1357
      # postgres 데이터베이스 초기 환경 설정(DB명, 유저명, 비밀번호)
    ports:
      - "5432:5432"  # 호스트에서 localhost:5432로 PostgreSQL 접근 가능
    volumes:
      - db-data:/var/lib/postgresql/data
      # 호스트 볼륨(db-data)을 컨테이너 내부의 PGDATA 디렉토리에 매핑, 데이터 영속화
    networks:
      - ecommerce

networks:
  ecommerce:
    driver: bridge

volumes:
  db-data:
  # PostgreSQL 데이터 영속화를 위한 볼륨